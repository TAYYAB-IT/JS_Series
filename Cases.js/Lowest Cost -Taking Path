 function Air_Port(st,en,co){
   this. start=st
    this. end=en
    this. cost=co}
	//Filter the elements Start with ,End with,Rest
function path_finder(airports,st,en){
filt_start=filt_end=rest=[];
paths=[] //All possible paths Start -> End
paths_costs=[]  //All Posssible Paths Costs
//Filter Airports
for(value of airports){
	if(value.start===st){filt_start.push(value)}
	else if(value.end===en){filt_end.push(value)}
	else{rest.push(value)}
}
//Path Finder
for(i in filt_start){
	if(filt_start[i].start==st && filt_start[i].end==en){paths.push([filt_start[i]])
		continue;}
	for(j in rest){
		c=false;
		for(z in filt_end){
			if(filt_start[i].start==st && filt_end[z].start==filt_start[i].end && filt_end[z].end==en){
				paths.push([filt_start[i],filt_end[z]])
				c=true;
			}
		    else if(filt_start[i].start==st &&rest[j].start==filt_start[i].end && filt_end[z].start==rest[j].end && filt_end[z].end==en){
			paths.push([filt_start[i],rest[j],filt_end[z]])}}
		if (c) {break;}
		}}
//No Path Exist
if(paths.length==0){
	return "No Path Exist";
}
//Cost Finder
for(i of paths){
	cost =0
for(j in i ){
 cost+=i[j].cost
}
 paths_costs.push(cost)
}
lowest_cost=Math.min.apply(0,paths_costs); //Lowest cost
cost_index=paths_costs.indexOf(lowest_cost); 
best=[paths[cost_index][0].start]
for(i of paths[cost_index]){
	best.push(i.end)
}
return best.toString()+"\n"+lowest_cost         //Lowest Cost Path & Cost
}
//Main()
const airports=[]
airports.push( new Air_Port('ISB','LHR',1000))
airports.push(new Air_Port('LHR','NYC',750))
airports.push(new Air_Port('CBS','NYC',775))
airports.push( new Air_Port('ISB','CBS',575))
airports.push(new Air_Port('CBS','GRC',731))
airports.push(new Air_Port('NYC','GRC',459))
const st="ISB"
const en="GRC"
console .log(path_finder(airports,st,en))